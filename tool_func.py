import os
import yaml
import difflib
from pprint import pp as print
from langchain_community.agent_toolkits import JsonToolkit, create_json_agent
from langchain_community.tools.json.tool import JsonSpec
from langchain_core.tools import tool
from langgraph.prebuilt import create_react_agent
from prompts import prefix, suffix, sys, system_message
from langchain_openai import AzureChatOpenAI
from functions import llm, API_KEY, chain, azure_file_path

from langchain_core.runnables.config import RunnableConfig
config = RunnableConfig(recursion_limit=50)

import logging

logging.basicConfig(
    level=logging.INFO,  # Change this to DEBUG for more detailed #logging
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)



model = AzureChatOpenAI(
    azure_endpoint="https://firstsenseai.openai.azure.com",
    azure_deployment="gpt432k",
    api_version="2024-05-01-preview",
    api_key=API_KEY,
    temperature=0,
    max_tokens=None,
)

guide_tool = []

@tool
def create_agent(file_path: str, query: str) -> str:
    """
    Create an agent to extract relevant information from a specified document.
    This function initializes an agent with the document located at the given
    file path and processes the query to extract information related
    to it. The agent will analyze the content of the document to identify
    relevant responses based on the query.

    Args:
        file_path (str): The path to the document file that the agent will analyze.
        query (str): The query to be processed by the agent.

    Returns:
        str: The response generated by the agent based on the provided query.
             This may include relevant information or references from the document.
    """
    # print("File: " + file_path + " Query: " + query)

    try:
        new_file_path = azure_file_path(file_path)
        with open(new_file_path, "r", encoding="utf-8") as f:
            data = yaml.load(f, Loader=yaml.FullLoader)
    except Exception as e:
        return "Error in file loading Create Agent"

    try:
        json_spec = JsonSpec(dict_=data, max_value_length=4000)
        json_toolkit = JsonToolkit(spec=json_spec)

        json_agent_executor = create_json_agent(
            handle_parsing_errors=True,
            prefix=prefix,
            suffix=suffix,
            llm=model,
            toolkit=json_toolkit,
            verbose=True,
            agent_executor_kwargs = {
                'max_iterations': 30
            }
        )
    except Exception as e:
        return "Error in creating jsong agent Create Agent"

    try: 

        text = f"""Context: {guide_tool[0]}
        
        Please analyze the following text extract details from the relevant sections            
        ```{query}```

        Note: Return the Final Answer in a readable format without modifying any information."""
        print("File: " + file_path + " Query: " + text)

        response = json_agent_executor.invoke(text)
        os.remove(new_file_path)

        return response
    except Exception as e:
        return "Error in Create Agent"



@tool
def get_file_path(text: str) -> str:
    """
    Use this function when "Refer to the..." in the Answer."

    Args:
        text (str): Answer that contains a reference to a document.

    Returns:
        tuple: A tuple containing two elements:
         - file_path (str): The path to the document file that the agent will analyze.
         - query (str): The query to be processed by the agent.
    """

    res = chain.invoke({"text": text})
    file_path = res['file_path']
    query = res['query']

    return file_path, query

messages = []


tools = [create_agent, get_file_path]


langgraph_agent_executor = create_react_agent(model, tools, state_modifier=system_message)